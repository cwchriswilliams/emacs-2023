#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle post-init.el
#+auto_tangle: t

* Introduction

  This file will generate a post-init.el file. This should be loaded from init.el with ~(load-file "path-to-post-init.el")~

* Lexical Binding

Feeling brave so attempting to see if this breaks my entire config.

#+BEGIN_SRC emacs-lisp

;; -*- lexical-binding: t -*-

  #+END_SRC

* Package Setup
** Straight Package Setup

Initialise [[https://github.com/radian-software/straight.el][Straight.el]] which is a better package manager

#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq package-enable-at-startup nil)

#+end_src

** Use Package Setup

Install =use-package= which we will use for future packages (Combined with straight which is set as the default)

#+begin_src emacs-lisp

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src


* General Emacs Setup
** Backups

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html][Backup Docs]]

Change the backup handling to write to a specific directory to stop polluting git directories

*** Settings

- =backup-by-copying= provides more consistency
- =backup-directory-alist= sets backup directory to in home directory by default

#+BEGIN_SRC emacs-lisp

  (setq backup-by-copying t)
  (setq backup-directory-alist '(("." . "~/.emacs-backups/")))
  (setq delete-old-versions t)
  (setq kept-new-versions 6)
  (setq kept-old-versions 2)
  (setq version-control t)

#+END_SRC

** Ripgrep setup

Use ripgrep instead of grep by default

#+begin_src emacs-lisp
  (setq xref-search-program #'ripgrep)
#+end_src


* Appearance
** Emacs window frame

- Skip splash screen
- Default scratch buffer to empty
- Hide scrollbar
- Hide toolbar
- Hide menubar
- Enable tab-bar (with history)
- Always highlight current line
- Show column number in modeline
- Show line numbers except in terminal modes

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (inhibit-startup-message t)
    (initial-scratch-message nil)
    :config
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (tab-bar-mode 1)
    (tab-bar-history-mode 1)
    (global-hl-line-mode +1)

    (column-number-mode)

    (global-display-line-numbers-mode t)
    (dolist (mode '(term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0)))))

#+end_src

** Theme

- Use [[https://github.com/greduan/emacs-theme-gruvbox][gruvbox]] theme
- use Source Code Pro font

#+begin_src emacs-lisp

  (use-package gruvbox-theme
    :config (load-theme 'gruvbox-dark-medium t))

  (use-package emacs
    :config
    (set-face-attribute 'default nil :font "Source Code Pro" :height 140))

#+end_src

** ef-themes

Install ef-themes in case I get bored

#+BEGIN_SRC emacs-lisp

  (use-package ef-themes)

#+END_SRC

** Modeline setup

Use [[https://github.com/seagle0128/doom-modeline][Doom-modeline]] for modeline ([[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is a dependency)

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

#+end_src


* Init Utilities
** General-Def

[[https://github.com/noctuid/general.el][General]] provides smarter key-bind setup.

#+BEGIN_SRC emacs-lisp

  (use-package general
   :demand
   :config
   (general-create-definer personal/leader-key
    :keymaps 'override
    :prefix "S-SPC")
   (general-create-definer personal/refactor
    :keymaps 'override
    :prefix "M-RET"))

 #+END_SRC

** Hydra

Hydra is a package for defining keyboard shortcuts in different ways

#+BEGIN_SRC emacs-lisp

  (use-package hydra)

#+END_SRC

* Help

** Which-Key Setup

[[https://github.com/justbur/emacs-which-key][which-key]] is a very useful tool for indicating what actions keys will do in various contexts.

#+BEGIN_SRC emacs-lisp

  (use-package which-key
   :custom (which-key-idle-delay 0.3)
   :config (which-key-mode))

#+END_SRC

** Helful Setup

[[https://github.com/Wilfred/helpful][helpful]] is a package that provides a more helpful help

#+begin_src emacs-lisp

	(use-package helpful
	  :general
	  ([remap describe-key] #'helpful-key)
	  ([remap describe-function] #'helpful-function)
	  ([remap describe-variable] #'helpful-variable)
	  ([remap describe-command] #'helpful-command))

#+end_src

* Version control

** Magit

Magit is the main git client being used

#+BEGIN_SRC emacs-lisp

  (use-package magit
   :custom (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))

#+END_SRC

*** Treemacs support

#+BEGIN_SRC emacs-lisp

    (use-package treemacs-magit
      :after (magit treemacs))

#+END_SRC

*** PR support

#+BEGIN_SRC emacs-lisp

  (use-package forge :after (magit))

#+END_SRC

*** Gitflow

#+BEGIN_SRC emacs-lisp

    (use-package magit-gitflow
      :hook 'magit-mode-hook (turn-on-magit-gitflow)
      :after (magit))

#+END_SRC

*** Show TODOs on Status

#+BEGIN_SRC emacs-lisp

  (use-package magit-todos
    :after magit
    :config (magit-todos-mode t))

#+END_SRC

** Git Gutter

Git gutter shows status of file in the fringe (left by default)

#+begin_src emacs-lisp
    (use-package git-gutter
      :config (global-git-gutter-mode +1))
#+end_src

* Navigation and Movement

** Emacs

Allow search to wrap around silently

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :custom
    (isearch-wrap-pause 'no-ding "Disable the pause and the ding when search wraps around"))

#+END_SRC

** Avy

Add avy for quick zipping around all open windows

#+begin_src emacs-lisp

  (use-package avy
    :bind ("C-'" . avy-goto-char-timer)
    :custom (avy-setup-default))

#+end_src

** Treemacs

*** Initial Setup

Use Treemacs as a kind of explorer like in vscode

#+BEGIN_SRC emacs-lisp

  (use-package treemacs
    :bind ("C-x t t" . treemacs)
    :config
    (treemacs-display-current-project-exclusively)
    (treemacs-project-follow-mode))

#+END_SRC

** Idle Highlight Mode

Highlight matches to the current symbol on idle

#+BEGIN_SRC emacs-lisp

  (use-package idle-highlight-mode
    :hook (prog-mode . idle-highlight-mode))

#+END_SRC

** SaveHist

[[https://www.emacswiki.org/emacs/SaveHist][savehist]] remembers minibuffer entries between sessions.
This is useful for tools like Vertico which sort based on this history

#+BEGIN_SRC emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+END_SRC

** Vertico

[[https://github.com/minad/vertico][Vertico]] Provides a vertical completion UI for emacs which is designed to work consistently in all situations

#+BEGIN_SRC emacs-lisp

  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t "Vertico list cycles at the end")
    (read-extended-command-predicate #'command-completion-default-include-p "Hide commands not valid for the current mode")
    (enable-recursive-minibuffers t "Minibuffers can use minibuffers"))

#+END_SRC

** Marginalia

[[https://github.com/minad/marginalia][marginalia]] enriches the minibuffer with extra details

#+BEGIN_SRC emacs-lisp

  (use-package marginalia
    :init
    (marginalia-mode))

#+END_SRC

** Orderless

[[https://github.com/oantolin/orderless][orderless]] makes matches in completions more flexible to allow for matching on multiple parts of the string

#+BEGIN_SRC emacs-lisp

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

#+END_SRC

** Corfu

[[https://github.com/minad/corfu][Corfu]] provides improvements to in-buffer completions

#+BEGIN_SRC emacs-lisp

  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 3)
    (corfu-separator ?\s)
    (completion-styles '(orderless))
    :init
    (global-corfu-mode))

#+END_SRC

** Cape

[[https://github.com/minad/cape][Cape]] - Completion at Point Extensions provides many more completion options

#+begin_src emacs-lisp

    (personal/leader-key "<SPC> t" '("complete-tag" . complete-tag))
    (use-package cape
      :config
      (personal/leader-key "<SPC> p" '("completion-at-point" . completion-at-point)) ;; capf
      (personal/leader-key "<SPC> t" '("complete-tag" . complete-tag))        ;; etags
      (personal/leader-key "<SPC> d" '("cape-dabbrev" . cape-dabbrev))        ;; or dabbrev-completion
      (personal/leader-key "<SPC> h" '("cape-history" . cape-history))
      (personal/leader-key "<SPC> f" '("cape-file" . cape-file))
      (personal/leader-key "<SPC> k" '("cape-keyword" . cape-keyword))
      (personal/leader-key "<SPC> s" '("cape-elisp-symbol" . cape-elisp-symbol))
      (personal/leader-key "<SPC> e" '("cape-elisp-block" . cape-elisp-block))
      (personal/leader-key "<SPC> a" '("cape-abbrev" . cape-abbrev))
      (personal/leader-key "<SPC> l" '("cape-line" . cape-line))
      (personal/leader-key "<SPC> w" '("cape-dict" . cape-dict))
      (personal/leader-key "<SPC> :" '("cape-emoji" . cape-emoji))
      (personal/leader-key "<SPC> \\" '("cape-tex" . cape-tex))
      (personal/leader-key "<SPC> _" '("cape-tex" . cape-tex))
      (personal/leader-key "<SPC> ^" '("cape-tex" . cape-tex))
      (personal/leader-key "<SPC> &" '("cape-sgml" . cape-sgml))
      (personal/leader-key "<SPC> r" '("cape-rfc1345" . cape-rfc1345)))

#+end_src

** Kind-Icon

[[https://github.com/jdtsmith/kind-icon][kind-icon]] shows icons in auto-completion frameworks where available

#+BEGIN_SRC emacs-lisp

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+END_SRC


** Embark

[[https://github.com/oantolin/embark][embark]] offers contextual actions from hotkey (similar to a right click menu)

#+BEGIN_SRC emacs-lisp

  (use-package embark
    :general
    ("C-." #'embark-act)
    ("C-;" #'embark-dwim))

#+END_SRC

*** Embark-Consult

#+BEGIN_SRC emacs-lisp

  (use-package embark-consult
    :after (embark consult))

#+END_SRC

** IEdit Mode

IEdit mode is for selecting a symbol/word and replacing it in a buffer

#+begin_src emacs-lisp

  (use-package iedit
    :bind ("C-#" . iedit-mode))

#+end_src


* Org Mode

** Basic Setup

#+BEGIN_SRC emacs-lisp

;  (use-package org
;    :custom (org-ellipsis " ➤")
;    (org-log-done 'time)
;;    (org-agenda-start-with-log-mode t)
;    (org-duration-format (quote h:mm))
;    (custom-set-faces
;     '(org-level-1 ((t (:height 1.5))))
;     '(org-level-2 ((t (:height 1.4))))
;     '(org-level-3 ((t (:height 1.3))))))

  (use-package org
  :ensure t
  :custom
  (org-ellipsis " ➤")
  (org-log-done 'time)
  (org-agenda-start-with-log-mode t)
  (org-duration-format (quote h:mm))
  :config
  (custom-set-faces
   '(org-level-1 ((t (:height 1.5))))
   '(org-level-2 ((t (:height 1.4))))
   '(org-level-3 ((t (:height 1.3))))))


#+END_SRC

** Org Bullets

More attractive org mode bullets to indicate header level

#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))

#+END_SRC

** Auto-Tangle

  Sets up Auto tangle on save

#+BEGIN_SRC emacs-lisp

  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))

#+END_SRC

** Org Reveal

For creating reveal.js presentations in org mode

#+BEGIN_SRC emacs-lisp

  (use-package ox-reveal)

#+END_SRC

** org-download

[[https://github.com/abo-abo/org-download][org-download]] downloads images automatically from various sources including clipboard and screenshots:

#+BEGIN_SRC emacs-lisp

  (use-package org-download
    :after org
    :hook (dired-mode . org-download-enable)
    (org-mode . org-download-enable))

#+END_SRC

** org-inline-anim

[[https://github.com/shg/org-inline-anim.el][org-inline-anim]] animates inline images in org mode

#+BEGIN_SRC emacs-lisp

  (use-package org-inline-anim
    :custom (org-inline-anim-loop t)
    :hook (org-mode . org-inline-anim-mode))

#+END_SRC

** Org-Roam

#+BEGIN_SRC emacs-lisp

  (use-package org-roam
    :config (org-roam-db-autosync-mode))

#+END_SRC

* Programming
** General Programming Config

- Delete trailing whitespace (programming modes only)
- Show matching paren on closing paren

#+begin_src emacs-lisp

  (use-package emacs
    :config
    (add-hook 'prog-mode-hook
	      (lambda ()
		(add-hook 'before-save-hook 'delete-trailing-whitespace)))
    (show-paren-mode 1))

#+end_src

** Flycheck

[[https://www.flycheck.org/en/latest/][Flycheck]] is an on the fly syntax checker

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :init
    (global-flycheck-mode))

#+END_SRC

** Parenthesis Configuration

*** Rainbow-Delimiters

Rainbow Delimiters alternates colours to better show the matched parens

#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
   :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

*** Structural Editing

Use paredit to ensure that parens cannot be unmatched

#+BEGIN_SRC emacs-lisp

  (use-package paredit
   :hook (clojure-mode . enable-paredit-mode)
   (emacs-lisp-mode . enable-paredit-mode)
   (lisp-mode . enable-paredit-mode))

#+END_SRC

** Snippets

*** Yasnippet Setup

Add snippet system (extended with other pacakges)

#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :config (yas-global-mode 1))

#+END_SRC

** Treesitter

Treesitter is a non-regex way of allowing emacs to understand code structure

*** Initial Setup

Add language sources

#+begin_src emacs-lisp

      (setq treesit-language-source-alist '((typescript . ("https://github.com/tree-sitter/tree-sitter-typescript.git" nil "typescript/src"))
					    (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript.git" nil "tsx/src"))
					    (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile.git" nil "src"))))

#+end_src

** Docker

[[https://github.com/Silex/docker.el][Docker]] package for managing docker containers and images

#+begin_src emacs-lisp

(use-package docker)

#+end_src

** Clojure
*** Add Clojure-Mode

[[https://github.com/clojure-emacs/clojure-mode][Clojure-Mode]]

#+begin_src emacs-lisp

    (use-package clojure-mode
      :hook ((clojure-mode . eglot-ensure)
	     (clojurec-mode . eglot-ensure)
	     (clojurescript-mode . eglot-ensure))
      :config (setq eldoc-idle-delay 2))

#+end_src

*** Extra font-locking for builtin symbols

#+begin_src emacs-lisp
    (use-package clojure-mode-extra-font-locking
      :after (clojure-mode))
#+end_src

*** Flycheck-Kondo for Clojure

For on-the-fly linting

#+begin_src emacs-lisp :ignore

  (use-package flycheck-clj-kondo
    :after (clojure-mode))

#+end_src

*** clj-refactor

To add extra refactorings

#+BEGIN_SRC emacs-lisp

  (use-package clj-refactor
    :hook ((clojure-mode . clj-refactor-mode)
	   (clojurec-mode . clj-refactor-mode)
	   (clojurescript-mode . clj-refactor-mode))
    :config
    (clj-refactor-mode 1)
    (cljr-add-keybindings-with-prefix "M-RET"))

#+END_SRC

*** Cider Setup

Add jack in support for a running REPL

#+BEGIN_SRC emacs-lisp

  (use-package cider
    :commands (cider cider-connect cider-jack-in)
    :custom
    (cider-eval-toplevel-inside-comment-form t)
    (clojure-toplevel-inside-comment-form t))

#+END_SRC

**** Portal Setup

Set up helpers for running [[https://github.com/djblue/portal][Portal]] an excellent data viewer and repl replacement for clojure

#+BEGIN_SRC emacs-lisp

  ;; Leverage an existing cider nrepl connection to evaluate portal.api functions
  ;; and map them to convenient key bindings.

  ;; def portal to the dev namespace to allow dereferencing via @dev/portal
  (defun portal.api/open ()
    (interactive)
    (cider-nrepl-sync-request:eval
      "(do (ns dev) (def portal ((requiring-resolve 'portal.api/open))) (add-tap (requiring-resolve 'portal.api/submit)))"))

  (defun portal.api/clear ()
    (interactive)
    (cider-nrepl-sync-request:eval "(portal.api/clear)"))

  (defun portal.api/close ()
    (interactive)
    (cider-nrepl-sync-request:eval "(portal.api/close)"))

  (setq personal/portal-keymap (make-sparse-keymap))
  (global-set-key (kbd "S-<SPC> p") (cons "portal" personal/portal-keymap))
  (global-set-key (kbd "S-<SPC> p o") '("open" . portal.api/open))
  (global-set-key (kbd "S-<SPC> p c") '("clear" . portal.api/clear))

#+END_SRC

***** Portal extensions

Add extensions to easily allow tapping without having to change the code.
`personal/portal-tap-viewers` can be set to customise the viewers that are available
(Thanks to https://github.com/sw1nn for improvements to the original script)

#+BEGIN_SRC emacs-lisp

  (defcustom personal/portal-tap-viewers '(":portal.viewer/inspector"
					   ":portal.viewer/pprint"
					   ":portal.viewer/table"
					   ":portal.viewer/tree"
					   ":portal.viewer/hiccup"
					   ":portal.viewer/tree")
    "List of viewers to be prompted when `C-u M-x personal/cider-tap-last-sexp`")

  (defun personal/cider-tap-last-sexp (&optional default-viewer)
    "Evaluate and tap the expression preceding point.
     If invoked with default-viewer, add this as metadata.
    If invoked with a single prefix argument, prompt for the viewer using the values defined in `personal/portal-tap-viewers`"
    (interactive (list (when (consp current-prefix-arg)
			 (completing-read "Default Viewer: " personal/portal-tap-viewers))))
    (cider-interactive-eval
     (if default-viewer
	 (concat "(tap> (vary-meta "
		 (apply #'buffer-substring-no-properties (cider-last-sexp 'bounds))
		 " merge {:portal.viewer/default "
		 default-viewer
		 "}))")
       (concat "(tap> " (apply #'buffer-substring-no-properties (cider-last-sexp 'bounds)) ")"))))

  (global-set-key (kbd "C-S-<return>") 'personal/cider-tap-last-sexp)

#+END_SRC

**** Cider Extra Functions

Extra functions for working in clojure.

Functions that kill the current symbol or line to the kill-ring. These are very useful for communicating code changes through messaging systems.

#+begin_src emacs-lisp

  (defun personal/get-namespace-for-symbol-dict(sym-dict)
    "Get the namespace from the provided `nrepl-dict`"
    (nrepl-dict-get sym-dict "ns"))

  (defun personal/get-symbol-name-for-symbol-dict(symbol-dict)
    "Get the symbol-name from the provided `nrepl-dict`"
    (nrepl-dict-get symbol-dict "name"))

  (defun personal/get-namespaced-symbol-for-symbol-dict(symbol-dict)
    "Get the namespaced symbol name from the provided `nrepl-dict`"
    (concat (personal/get-namespace-for-symbol-dict symbol-dict)
	    "/"
	    (personal/get-symbol-name-for-symbol-dict symbol-dict)))

  (defun personal/get-project-relative-file-path-for-current-file()
    "Get the path to the current file, relative to the project root"
    (file-relative-name (buffer-file-name) (clojure-project-root-path)))

  (defun personal/get-current-line-in-relative-file-path()
    "Get the path to the current file, relative to the project root followed by the line number"
    (concat (personal/get-project-relative-file-path-for-current-file)
	    ":"
	    (number-to-string (current-line))))

  (defun personal/kill-reference-to-symbol()
     "Kill a reference to the current namespaced symbol."
    (interactive)
    (let ((symbol-dict (cider-var-info (cider-symbol-at-point))))
      (kill-new (personal/get-namespaced-symbol-for-symbol-dict symbol-dict))))

  (defun personal/kill-reference-to-line()
    "Kill a reference to the current line in the file."
    (interactive)
    (kill-new (personal/get-current-line-in-relative-file-path)))

  (defun personal/kill-reference-to-namespace ()
    "Kill a reference to the current namespace"
    (interactive)
    (kill-new (substring-no-properties (clojure-find-ns))))

  (setq personal/kill-reference-keymap (make-sparse-keymap))
  (global-set-key (kbd "S-<SPC> k") (cons "kill-reference" personal/kill-reference-keymap))
  (global-set-key (kbd "S-<SPC> k s") '("kill-reference-to-symbol" . personal/kill-reference-to-symbol))
  (global-set-key (kbd "S-<SPC> k n") '("kill-reference-to-ns" . personal/kill-reference-to-namespace))
  (global-set-key (kbd "S-<SPC> k l") '("kill-reference-to-line" . personal/kill-reference-to-line))


  #+end_src

*** clj-deps-new

[[https://github.com/jpe90/emacs-clj-deps-new][clj-deps-new]] is a package for interacting with [[https://github.com/seancorfield/clj-new][clj-new]] and [[https://github.com/seancorfield/deps-new][deps-new]] for creating new projects from within emacs

#+BEGIN_SRC emacs-lisp

  (use-package clj-deps-new)

#+END_SRC

*** Aggressive Indent

Aggressively indents code as you type.

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :hook ((clojure-mode . aggressive-indent-mode)
	   (clojurec-mode . aggressive-indent-mode)
	   (clojurescript-mode . aggressive-indent-mode)))
#+end_src

*** yasnippet

Snippets for clojure

#+BEGIN_SRC emacs-lisp

  (use-package clojure-snippets
    :after yasnippet clojure-mode)

#+END_SRC

*** Project.el Config

Add detection for =deps.edn= as a project root file

#+begin_src emacs-lisp :tangle no
  (cl-defmethod project-root ((project (head personal/clojure)))
    (cdr project))

  (defun personal/sub-projects-clojure (dir)
    (if-let ((root (locate-dominating-file dir "deps.edn")))
	(cons 'personal/clojure root)))

  (add-hook 'project-find-functions #'project-try-vc 0)
  (add-hook 'project-find-functions #'personal/sub-projects-clojure -40)

#+end_src

** Common Lisp
*** Sly

The Common Lisp REPL

#+begin_src emacs-lisp

  (use-package sly)

  #+end_src

** Python

*** Basic setup

#+BEGIN_SRC emacs-lisp

  (setq python-indent-offset 4)
  (setq python-shell-interpreter "python3")

#+END_SRC

*** Elpy setup

[[https://github.com/jorgenschaefer/elpy][Elpy]] is a python IDE like experience for emaces

#+BEGIN_SRC emacs-lisp

  (use-package elpy
  :init
  (elpy-enable)
  :config
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (setq elpy-rpc-virtualenv-path 'current))

#+END_SRC

*** PyVenv setup

[[https://github.com/jorgenschaefer/pyvenv][PyVenv]] is a tool for managing python virtual environments in emacs

#+BEGIN_SRC emacs-lisp

  (use-package pyvenv
  :after elpy
  :config
  (setenv "WORKON_HOME" (expand-file-name "~/.local/share/virtualenvs/")))

#+END_SRC

*** Blacken Setup

[[https://github.com/pythonic-emacs/blacken][Blacken]] ensures that code complies with the Blacken style

#+BEGIN_SRC emacs-lisp

  (use-package blacken
  :hook (python-mode . blacken-mode))

#+END_SRC


*** Flake8 Setup

#+BEGIN_SRC emacs-lisp

  (setq flycheck-python-flake8-executable "/usr/bin/flake8")

#+END_SRC

** Rust

*** Initial setup

#+BEGIN_SRC emacs-lisp

  (use-package rust-mode
  :hook
  ((rust-mode . (lambda () (setq indent-tabs-mode nil)))
   (rust-mode . racer-mode)
   (rust-mode . flycheck-rust-setup)))

#+END_SRC

*** Racer setup

For autocompletion

#+BEGIN_SRC emacs-lisp

  (use-package racer
  :after rust-mode
  :hook
  (racer-mode . eldoc-mode))

#+END_SRC

*** Flycheck

Flycheck setup

#+BEGIN_SRC emacs-lisp

  (use-package flycheck-rust
  :after rust-mode
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

#+END_SRC

*** Cargo

Cargo integration

#+BEGIN_SRC emacs-lisp

  (use-package cargo
  :after rust-mode
  :hook
  (rust-mode . cargo-minor-mode))

#+END_SRC

** Web Development

*** Web mode

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
  :straight t
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.js\\'" . web-mode))
  :config
  (setq web-mode-content-types-alist
        '(("jsx" . "\\.js[x]?\\'")))
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-quoting t))

#+END_SRC

*** Emmet mode

#+BEGIN_SRC emacs-lisp

  (use-package emmet-mode
  :straight t
  :hook (web-mode css-mode sgml-mode))

#+END_SRC

*** Rainbow Mode

Shows colours in css files as colours

#+BEGIN_SRC emacs-lisp

  (use-package rainbow-mode
  :straight t
  :hook (web-mode css-mode))

#+END_SRC

*** Javascript and Typescript

#+BEGIN_SRC emacs-lisp

  (use-package js2-mode
    :straight t
    :mode "\\.js\\'")

  (use-package tide
    :straight t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))

#+END_SRC

*** Linting and Formatting

#+BEGIN_SRC emacs-lisp

  (use-package prettier-js
    :straight t
    :hook ((web-mode js2-mode typescript-mode) . prettier-js-mode))

  (with-eval-after-load 'flycheck
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'javascript-eslint 'js2-mode)
    (setq flycheck-javascript-eslint-executable "/usr/bin/eslint"))

#+END_SRC

*** Node.js

#+BEGIN_SRC emacs-lisp

  (use-package indium
  :straight t
  :hook (js2-mode . indium-interaction-mode))

#+END_SRC

** UUID Generator

Comes via [[https://nullprogram.com/blog/2010/05/11/][Chris Wellons]]. Generates a uuid in emacs. I use this only for generating uuids for test data.

#+BEGIN_SRC emacs-lisp

  (defun uuid-create ()
  "Return a newly generated UUID. This uses a simple hashing of variable data."
  (let ((s (md5 (format "%s%s%s%s%s%s%s%s%s%s"
			(user-uid)
			(emacs-pid)
			(system-name)
			(user-full-name)
			user-mail-address
			(current-time)
			(emacs-uptime)
			(garbage-collect)
			(random)
			(recent-keys)))))
    (format "%s-%s-3%s-%s-%s"
	    (substring s 0 8)
	    (substring s 8 12)
	    (substring s 13 16)
	    (substring s 16 20)
	    (substring s 20 32))))

  (defun uuid-insert ()
  "Inserts a new UUID at the point."
  (interactive)
  (insert (uuid-create)))

#+END_SRC

* Reading and Writing

** nov.el setup

Set up for reading epub files

#+BEGIN_SRC emacs-lisp

    (use-package nov
     :config (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

#+END_SRC

** RFC Mode

[[https://github.com/galdor/rfc-mode][rfc-mode]] allows access to rfcs within emacs

#+BEGIN_SRC emacs-lisp

  (use-package rfc-mode
    :custom
    (rfc-mode-directory (expand-file-name "~/.local/rfc")))

#+END_SRC

** adoc-mode

[[https://github.com/bbatsov/adoc-mode][adoc-mode]] allows reading and writing and highlighting for adoc files

#+begin_src emacs-lisp

  (use-package adoc-mode)

#+end_src

* Emacs Improvements

- Add shortcut for zap-up-to-char similar to zap-to-char
- Add imenu shortcut

#+BEGIN_SRC emacs-lisp

      (general-def
	"M-Z" 'zap-up-to-char
	"M-i" 'imenu)

#+END_SRC

* Emacs Window Management

Shell and repl windows appear at the bottom of the screen in a dedicated window when possible

#+begin_src emacs-lisp

  (setq switch-to-buffer-in-dedicated-window t)
  (add-to-list 'display-buffer-alist
	       '("\\*.*-?(?repl\\|e?shell)?.*\\*" display-buffer-in-side-window
		 (side . bottom)
		 (slot . 0)
		 (window-height . 0.3)
		 (window . root)
		 (dedicated . t)))

#+end_src

* Add REST Client

[[https://github.com/pashky/restclient.el][restclient]] is a package that allows sending of REST requests in emacs in a way similar to Postman

#+BEGIN_SRC emacs-lisp

  (use-package restclient)

#+END_SRC

* Add Terraform Package

[[https://github.com/hcl-emacs/terraform-mode][Terraform-mode]] is a mode that supports terraform syntax

#+BEGIN_SRC emacs-lisp

  (use-package terraform-mode
  :custom (terraform-indent-level 4))

#+END_SRC

* Eshell configuration

** Prompt setup

"[chris@Hestia|main [S:0 M:1 U:1]] ~/.config/emacs $"

#+BEGIN_SRC emacs-lisp

  (defun my/eshell-git-repo-status ()
  "Return a concise repo status string."
  (string-trim (shell-command-to-string
  		"git status --porcelain=v1 | awk 'BEGIN {staged=0; modified=0; untracked=0} /^M/ {modified++} /^M / {staged++} /^??/ {untracked++} END {sep=\"\"; if (staged > 0) {printf \"S\" staged; sep=\"|\"} if (modified > 0) {printf sep \"M\" modified; sep=\"|\"} if (untracked > 0) {printf sep \"U\" untracked} print \"\"}'"))
  )

  (defun my/eshell-git-prompt ()
    "Return the current branch and status for the eshell prompt"
    (let ((branch (magit-get-current-branch))
        (status (my/eshell-git-repo-status)))
    (when branch
      (concat "|"
              branch
              (if (not (string-empty-p status)) (concat "[" status "]"))))))

  (defun my/eshell-prompt ()
    "Return the full eshell prompt string"
    (concat "[" user-login-name "@" (system-name) (my/eshell-git-prompt) "] " (eshell/pwd) " $ "))

  (setq eshell-prompt-function 'my/eshell-prompt)


#+END_SRC

** Eshell Readonly

Make Eshell Readonly except where a traditional shell would allow editing

#+BEGIN_SRC emacs-lisp

  (defun my-read-only-eshell-prompt ()
    (let ((prompt (my/eshell-prompt)))
      (add-text-properties 0 (length prompt) '(read-only t) prompt)
      prompt))

    (setq eshell-prompt-function 'my-read-only-eshell-prompt)

    (defun my-read-only-eshell-output ()
      (let ((inhibit-read-only t)
  	    (beg (eshell-beginning-of-output))
  	    (end (eshell-end-of-output)))
        (put-text-property beg end 'read-only t)))

;    (add-hook 'eshell-output-filter-functions 'my-read-only-eshell-output)


#+END_SRC

** EShell Colour

#+BEGIN_SRC emacs-lisp

    (use-package xterm-color
    :ensure t
    :after eshell-mode
    :config
    ;; This will set `xterm-color-filter' as the filter for comint processes. This includes eshell,
    ;; but also other modes like shell-mode or compilation-mode.
    (setq comint-output-filter-functions
          (remove 'ansi-color-process-output comint-output-filter-functions))

    (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)

    ;; For eshell specifically
    (setq eshell-output-filter-functions
          (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    )

    (add-hook 'eshell-before-prompt-hook
              (lambda ()
              (setq xterm-color-preserve-properties t)
  	    (setenv "TERM" "xterm-256color")))



#+END_SRC

* Japanese Language

Hiragana for marked region (requires kakasi installed)

#+BEGIN_SRC emacs-lisp

  (defun my/hiragana-conversion ()
  (interactive)
  (let* ((word (if (use-region-p)
                   (buffer-substring-no-properties (region-beginning) (region-end))
                 (thing-at-point 'word t)))
         (hiragana (shell-command-to-string (format "echo \"%s\" | kakasi -i \"utf-8\" -f -JH -KH" word))))
    (message "Hiragana: %s" hiragana)))

#+END_SRC

* Emoji setup

#+BEGIN_SRC emacs-lisp

  (when (member "Noto Color Emoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))

#+END_SRC

* RSS

** Elfeed

RSS setup with Elfeed

#+BEGIN_SRC emacs-lisp

  (use-package elfeed)

#+END_SRC

*** Elfeed-org

#+BEGIN_SRC emacs-lisp

    (use-package elfeed-org
      :config (elfeed-org)
        (setq rmh-elfeed-org-files (list (expand-file-name "~/.config/emacs/elfeed.org"))))

#+END_SRC

* Eww Readable

Based on code from https://emacs.stackexchange.com/a/36287

#+BEGIN_SRC emacs-lisp

  (defun my/get-selected-region-or-prompt ()
  "Get the selected region's content or prompt the user if no region is selected."
  (if (use-region-p)
      (buffer-substring-no-properties (region-beginning) (region-end))
    (read-string "URL: ")))

  (defun my/eww-open-readable ()
  "Open URL in readable mode."
  (interactive)
  (letrec ((nonce (lambda ()
                    (unwind-protect
                        (eww-readable)
                      (remove-hook 'eww-after-render-hook nonce)))))
    (add-hook 'eww-after-render-hook nonce))
  (let ((selected-url (my/get-selected-region-or-prompt)))
    (eww selected-url)))

#+END_SRC

* Breadcrumb

Enable Breadcrumbs globally until I have time to be a little more custom

#+BEGIN_SRC emacs-lisp

    (use-package breadcrumb
      :config (breadcrumb-mode))

#+END_SRC

* ChatGPT

ChatGPT Integration currently uses my fork which adds a couple of features I use often

#+BEGIN_SRC emacs-lisp

  (straight-use-package
   '(openai :type git :host github :repo "emacs-openai/openai"))

  (straight-use-package
   '(chatgpt :type git :host github :repo "emacs-openai/chatgpt"
              :fork (:host github
  			 :repo "cwchriswilliams/chatgpt"
  			 :branch "customised-fork-behaviour")))

#+END_SRC
